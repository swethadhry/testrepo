name: CI_Flash

# Controls when the workflow will run
on: workflow_dispatch

jobs:
  take-screenshot:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set Screen Resolution
        run: |
          Add-Type -TypeDefinition @"
            using System;
            using System.Runtime.InteropServices;
            public class Display {
                [DllImport("user32.dll")]
                public static extern long ChangeDisplaySettings(ref DEVMODE devMode, int flags);
                [DllImport("user32.dll")]
                public static extern bool EnumDisplaySettings(string deviceName, int modeNum, ref DEVMODE devMode);
                public const int ENUM_CURRENT_SETTINGS = -1;
                public const int CDS_UPDATEREGISTRY = 0x01;
                public const int DISP_CHANGE_SUCCESSFUL = 0;
                [StructLayout(LayoutKind.Sequential)]
                public struct DEVMODE {
                    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
                    public string dmDeviceName;
                    public short dmSpecVersion;
                    public short dmDriverVersion;
                    public short dmSize;
                    public short dmDriverExtra;
                    public int dmFields;
                    public int dmPositionX;
                    public int dmPositionY;
                    public int dmDisplayOrientation;
                    public int dmDisplayFixedOutput;
                    public short dmColor;
                    public short dmDuplex;
                    public short dmYResolution;
                    public short dmTTOption;
                    public short dmCollate;
                    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
                    public string dmFormName;
                    public short dmLogPixels;
                    public int dmBitsPerPel;
                    public int dmPelsWidth;
                    public int dmPelsHeight;
                    public int dmDisplayFlags;
                    public int dmDisplayFrequency;
                    public int dmICMMethod;
                    public int dmICMIntent;
                    public int dmMediaType;
                    public int dmDitherType;
                    public int dmReserved1;
                    public int dmReserved2;
                    public int dmPanningWidth;
                    public int dmPanningHeight;
                }
                public static bool SetResolution(int width, int height) {
                    DEVMODE dm = new DEVMODE();
                    dm.dmSize = (short)Marshal.SizeOf(typeof(DEVMODE));
                    if (EnumDisplaySettings(null, ENUM_CURRENT_SETTINGS, ref dm)) {
                        dm.dmPelsWidth = width;
                        dm.dmPelsHeight = height;
                        int iRet = (int)ChangeDisplaySettings(ref dm, CDS_UPDATEREGISTRY);
                        return iRet == DISP_CHANGE_SUCCESSFUL;
                    }
                    return false;
                }
            }
          "@
            [Display]::SetResolution(1920, 1080)
      - name: Open Task Manager
        run: |
          Start-Process -FilePath "taskmgr.exe"
          Start-Sleep -Seconds 5
      - name: Take Desktop Screenshot
        run: |
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          # $bitmap = New-Object Drawing.Bitmap([System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Width, [System.Windows.Forms.Screen]::PrimaryScreen.Bounds.Height)
          $bitmap = New-Object Drawing.Bitmap([System.Windows.Forms.SystemInformation]::VirtualScreen.Width, [System.Windows.Forms.SystemInformation]::VirtualScreen.Height)
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $graphics.CopyFromScreen([System.Drawing.Point]::Empty, [System.Drawing.Point]::Empty, $bitmap.Size)
          $bitmap.Save("$env:GITHUB_WORKSPACE\screenshot.png",[System.Drawing.Imaging.ImageFormat]::Png)
          
      - name: Upload Screenshot
        uses: actions/upload-artifact@v3
        with:
          name: screenshot
          path: ${{ github.workspace }}/screenshot.png
      # - uses: actions/checkout@v3
      # - name: Take Desktop Screenshot
      #   run: powershell -Command "Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.Clipboard]::SetImage([System.Windows.Forms.ScreenCapture]::CaptureDesktop())"
      # - name: Save Screenshot
      #   run: powershell -Command "Add-Type -AssemblyName System.Drawing; [System.Drawing.Bitmap]::FromClipboard().Save('screenshot.png')"
      # - name: Upload Screenshot
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: screenshot
      #     path: screenshot.png
      # - uses: actions/checkout@v3
      # - name: Take Desktop Screenshot
      #   uses: OrbitalOwen/desktop-screenshot-action@v0.1
      #   with:
      #     file-name: 'desktop.jpg'
